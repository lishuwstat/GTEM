

### individual method (N)

library(gtools)
library(doParallel)
library(doRNG)
library(ICsurv)

time1= date()

setwd("D:/wd21") ### set the working directory

mm = 500  ### number of replicates

max.loops = 1000## maximum number of iteration

theta0 = c(0.5, 0.5, -0.5, -0.5, -0.5)## true  value of regression parameters

p <- length(theta0) ### dimension

tau = 2

p.knots = 100   ### length of times of interest

xlab.t = seq(0,tau,length.out= p.knots)## times of interest, at which we obtain the survival function estimates

Lambda.all = matrix(1,mm,p.knots)
see.Lambda.all = matrix(1,mm,p.knots)

Surv.all = matrix(1,mm,p.knots)
see.Surv.all = matrix(1,mm,p.knots)

R.rate = c()

loop=c()

###############################

seed.start = 100

iter = 1
for( iter in 1:mm){

set.seed(seed.start+iter)

n = 7000  ##### group number

gs1 = sample(c(1,2,3,4), n, replace = TRUE)  ##### group size 

N = sum(gs1) ## number of individuals

gs = 1  ##### group size 

n=N

K_n = floor(10*n^(1/3))

loops = 0

diff.zeta = 100

tol = 0.001

#########################################

x1 = rbinom(n,1,0.5)

x2 = rbinom(n,1,0.5)

x3 = rbinom(n,1,0.5)

x4 = rbinom(n,1,0.5)

x5 = rbinom(n,1,0.5)

x = cbind(x1,x2,x3,x4,x5)  #### n by p

#############################################

v <- runif(n, 0, 1)

##### t <-  exp(-log(v)*(exp(as.matrix(x)%*%theta0))^(-1))-1

##### t <- 5*(-log(v))*exp(-as.matrix(x)%*%theta0)

t <-  10*(exp(-log(v)*(exp(as.matrix(x)%*%theta0))^(-1))-1)##Zeng 2016

tau = 2

C <- runif(n,0,tau)

phi = 1*( t<=C)  ######  true individual results

alpha =  1

beta = 1

#####alpha =  beta = 1

gamma = alpha + beta - 1

groups = permute(rep(1:ceiling(n/gs), length.out = n))

Ys = sapply(1:ceiling(n/gs), FUN = function(X){  ###### group testing results

temp  = phi[groups == X]

Delta = ifelse(sum(temp) != 0, 1, 0) ######  true group results

######  add misclassification

Y = ifelse(Delta == 1, 

rbinom(1, 1, prob = alpha), 

rbinom(1, 1, prob = 1-beta)   ) 

Y

})

#################  Naive method ###########

Y.i = sapply(1:n, FUN = function(X){

ifelse(phi[X]==1, 

rbinom(1, 1, prob = alpha), 

rbinom(1, 1, prob = 1-beta)) }) 


L=R=d1=d2=d3 = rep(0,n)

d1= Y.i

d3 = 1-Y.i

L[Y.i==1] = 0

L[Y.i==0] = C[Y.i==0]

R[Y.i==1] = C[Y.i==1]

R[Y.i==0] = Inf


#ph.est = fast.PH.ICsurv.EM(d1, d2, d3, L, R, x, n.int=8, order=3, g0=rep(1,11), b0=rep(0,p), tol=0.001,
#t.seq=seq(0,57,1), equal = TRUE)

#the.est.naive =ph.est$b 

#sd.the.naive = sqrt(diag(ph.est$var.b)) 

#cp.the.naive = (the.est.naive-1.96*sd.the.naive < theta0)*(theta0< the.est.naive +1.96*sd.the.naive)


#########################################

order.C = seq(min(C),max(C),length.out= K_n)
k = length(order.C)

Ind.xlab = matrix(rep(order.C,each =p.knots),p.knots,K_n) <= matrix(rep(xlab.t, K_n),p.knots,K_n)

g.n = list()

j = 1
for(j in 1:ceiling(n/gs)){

g.n[[j]] = length(C[groups == j])
 
}

Ind.C = list()

j = 1
for(j in 1:ceiling(n/gs)){

Ind.C[[j]] = matrix(rep(order.C,each = g.n[[j]] ),g.n[[j]] ,k) <= matrix(rep(C[groups == j],k), g.n[[j]] , k)
 
}

theta.ini = rep(0,p)

lambda.ini = rep(1/n,k)

theta.hat = theta.ini

lambda.hat = lambda.ini

############ judge start ##############

while(diff.zeta >= tol && loops < max.loops){

############   E-Step

W = S = E.phi = E.Z = list()

E.Zk  = rep(0,k)

num = denom =  0

j = 1
for(j in 1:ceiling(n/gs)){

W[[j]] = rowSums(matrix(rep(lambda.hat, each=g.n[[j]] ), g.n[[j]] , k)*
matrix(rep(exp(t(x[groups == j,])%*%as.matrix(theta.hat)),k),g.n[[j]] ,k)*Ind.C[[j]] ) 

S[[j]] = exp(-W[[j]])

E.phi[[j]] = Ys[j]*alpha*(1-S[[j]])/(alpha-gamma*prod(S[[j]])) + 
(1-Ys[j])*(1-alpha)*(1-S[[j]])/(1-alpha+gamma*prod(S[[j]]))

E.Z[[j]] = matrix(rep(lambda.hat, each=g.n[[j]]),g.n[[j]], k)*
                 matrix(rep(exp(t(x[groups == j,])%*%as.matrix(theta.hat)),k),g.n[[j]],k)*
                 (E.phi[[j]]*(1-S[[j]])^(-1)*Ind.C[[j]] + (1-Ind.C[[j]])) 

E.Zk = E.Zk +  apply(E.Z[[j]],2,sum)

num = num + as.matrix(x[groups == j,])%*%as.matrix(exp(t(x[groups == j,])%*%as.matrix(theta.hat))) #### p by 1

denom = denom + sum(exp(t(x[groups == j,])%*%as.matrix(theta.hat)))   #####  1 by 1

}

###########M-step

U = I = E.Z.sum = 0

j = 1
for(j in 1:ceiling(n/gs)){

U = U + t(as.matrix(x[groups == j,] - matrix(rep(num/denom,each=g.n[[j]]),g.n[[j]],p)))%*%as.matrix(apply(
as.matrix(E.Z[[j]]),1,sum))

E.Z.sum = E.Z.sum + sum(E.Z[[j]])

}

lambda.est = E.Zk/sum(exp(as.matrix(x)%*%as.matrix(theta.hat)))

#####if(any(is.na(lambda.est))) lambda.est = lambda.ini

################################################################

II = -(t(as.matrix(x))%*%(as.vector(exp(x%*%theta.hat))*x)*
denom-as.matrix(num)%*%t(as.matrix(num)))/denom^2

I = E.Z.sum*II

theta.est = theta.hat - solve(I)%*%U

####if(any(is.na(theta.est))) theta.est = theta.ini

######################################################################

diff.theta = abs(theta.est-theta.hat)
diff.lambda = abs(lambda.est-lambda.hat)


diff.zeta = max(diff.theta, diff.lambda)

theta.hat = theta.est
lambda.hat = lambda.est

loops = loops+1

} ######### judge end #########

the.est = theta.hat

lam.est = lambda.hat

loop[iter]=loops

Lambda.all[iter,] = rowSums(matrix(rep(lam.est,each =p.knots),p.knots,K_n)*Ind.xlab)

Surv.all[iter,] = exp(-rowSums(matrix(rep(lam.est,each =p.knots),p.knots,K_n)*Ind.xlab))

R.rate[iter] = 1-mean(phi)

}

### output

print(c('n=',n))
print(c('theta0=',theta0))
print(c('alpha=',alpha))
print(c('beta=',beta))
print(c('GroupSize=',gs))

Lambda.int = apply(Lambda.all,2,mean)

Surv.int = apply(Surv.all,2,mean)

write.table(Lambda.int,"D:\\wd21\\Lambda.N.txt")

##Lambda.N = read.table(file="D:\\wd21\\Lambda.N.txt")
##Lambda.N.int = as.vector(Lambda.N$x)

write.table(Surv.int,"D:\\wd21\\Surv.N.txt")

##Surv.N = read.table(file="D:\\wd21\\Surv.N.txt")
##Surv.N.int = as.vector(Surv.N$x)

#####################

time2 = date()

print(rbind(time1,time2))





