##############################################################
# Set working directory and read in the data 

setwd("C://Users//mcmaha2//OneDrive - Clemson University//Desktop//Survival GT New//Simulated example")
data<-read.csv("Data.csv",header=TRUE)

##################################
# Required packages
library(gtools)
library(doParallel)
library(doRNG)
library(ICsurv)


#################################################
# Read in code that executes the proposed method
source("Support functions.txt")


#################################################
# Structure the data

C<-data[,4]
x<-as.matrix(data[,c(5,6)])
groups<-data[,2]
upool.id<-unique(groups)

Y<-NULL
g.n<-NULL

for(i in 1:length(upool.id)){
id<-which(groups==upool.id[i])
Y<-c(Y,max(data[id,3]))             # Identifies the pool test outcome
g.n<-c(g.n,length(id))              # Identifies the pool size
}

#################################################
# Specify sensitivity and specificity
alpha = rep(0.95,length(Y))
beta = rep(0.98,length(Y))


###########################################################
# Specify Kn
Kn<-floor((length(Y)^(1/3)))

###########################################################
# Fits the model
res<-EM.GTS(Ys=Y,x=x,C=C,Kn=Kn,alpha=alpha,beta=beta, groups=groups, g.n=g.n, upool.id=upool.id)

#####################################################################
# Estimates the standard errors via the proposed resampling apporach

theta.save<-matrix(-99,nrow=100,ncol=dim(x)[2])
Surv.save<-matrix(-99,nrow=100,ncol=Kn)

set.seed(123456)
for(i in 1:100){
res.temp<-Boot.GTS(Ys=Y,x=x,C=C,Kn=Kn,alpha=alpha,beta=beta, groups=groups, g.n=g.n, upool.id=upool.id, bs=1, theta.hat1=res$theta, lambda.hat1=res$lam)
theta.save[i,]<-res.temp$bss
Surv.save[i,]<-res.temp$Surv
}

res2<-list("bss"=theta.save, "Surv"=Surv.save)
sd.theta = apply(res2$bss,2,sd)
p.value = 2*(1 - pnorm(abs(res$theta), 0, sd.theta))


#######################################################################################
# Provides point estimate, standard error estimate, and p-value for covariate effects
round(cbind(res$theta,sd.theta,p.value),3)


#######################################################################
# Plot the survival function estimates
t.int =  seq(min(C),max(C),length.out=Kn)

# Baseline estimate and 95% CI
plot(t.int,res$Surv,ylim=c(0.75,1), type="l", xlab="Age (in years)", ylab="Survival function", main="", xlim=c(min(C),max(C)), lwd=2, las=1)
res.temp<-apply(res2$Surv,2,sd)
lines(t.int, res$Surv+1.96*res.temp, lty="dashed", lwd=2)
lines(t.int, res$Surv-1.96*res.temp, lty="dashed", lwd=2)


# Estimate and 95% CI for x1=1, x2=0
lines(t.int,exp(log(res$Surv)*exp(res$theta[1])), col="gray50", lwd=2)
res.temp<-survx(1,beta=res2$bss,surv=res2$Surv)
lines(t.int,exp(log(res$Surv)*exp(res$theta[1]))+1.96*res.temp,lty="dashed",col="gray50", lwd=2)
lines(t.int,exp(log(res$Surv)*exp(res$theta[1]))-1.96*res.temp,lty="dashed",col="gray50", lwd=2)

# Estimate and 95% CI for x1=0, x2=1
lines(t.int,exp(log(res$Surv)*exp(res$theta[2])), col="gray88", lwd=2)
res.temp<-survx(2,beta=res2$bss,surv=res2$Surv)
lines(t.int,exp(log(res$Surv)*exp(res$theta[2]))+1.96*res.temp,lty="dashed",col="gray88", lwd=2)
lines(t.int,exp(log(res$Surv)*exp(res$theta[2]))-1.96*res.temp,lty="dashed",col="gray88", lwd=2)



