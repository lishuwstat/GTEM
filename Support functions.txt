##################################################################################
# Fits the PH model to current status data measured in pools
#
# Ys =  pool outcome
# x  = design matrix
# C  = time
# Kn = number of knots
# alpha = vector of Se vals
# beta =  vector of Sp vals
# groups = vector length n that identifies which pool each subject belongs
# g.n = vector of pool sizes
# upool.id = vector of unique pool ids 



EM.GTS<-function(Ys, x, C, Kn, alpha, beta, groups, g.n, upool.id){

gamma = alpha + beta - 1

n = dim(x)[1]
p = dim(x)[2]


K_n = Kn

loops<-0
max.loops = 1000
diff.zeta = 100
tol = 0.001
order.C = seq(min(C),max(C),length.out= K_n)

k = length(order.C)

##### g.n is the final group size 

Ind.C = list()

for(j in 1:length(upool.id)){
Ind.C[[j]] = matrix(rep(order.C,each = g.n[[j]] ),g.n[[j]] ,k) <= matrix(rep(C[groups == upool.id[j]],k), g.n[[j]] , k) 
}

theta.ini = rep(0,p)
lambda.ini = rep(1/n,k)
theta.hat = theta.ini
lambda.hat = lambda.ini

############ judge start ##############
while(diff.zeta >= tol && loops < max.loops){

############   E-Step
W = S = E.phi = E.Z = list()
E.Zk  = rep(0,k)
num = denom =  0
for(j in 1:length(upool.id)){

W[[j]] = rowSums(matrix(rep(lambda.hat, each=g.n[[j]] ), g.n[[j]] , k)*matrix(rep(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat)),k),g.n[[j]] ,k)*Ind.C[[j]] ) 

S[[j]] = exp(-W[[j]])

E.phi[[j]] = Ys[j]*alpha[j]*(1-S[[j]])/(alpha[j]-gamma[j]*prod(S[[j]])) + (1-Ys[j])*(1-alpha[j])*(1-S[[j]])/(1-alpha[j]+gamma[j]*prod(S[[j]]))

E.Z[[j]] = matrix(rep(lambda.hat, each=g.n[[j]]),g.n[[j]], k)*matrix(rep(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat)),k),g.n[[j]],k)*(E.phi[[j]]*(1-S[[j]])^(-1)*Ind.C[[j]] + (1-Ind.C[[j]])) 

E.Zk = E.Zk +  apply(E.Z[[j]],2,sum)

num = num + t(x[groups == upool.id[j],,drop=F])%*%as.matrix(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat))) #### p by 1

denom = denom + sum(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat)))   #####  1 by 1
}

###########M-step

U = I = E.Z.sum = 0

for(j in 1:length(upool.id)){
U = U + t(as.matrix(x[groups == upool.id[j],,drop=F] - matrix(rep(num/denom,each=g.n[[j]]),g.n[[j]],p)))%*%as.matrix(apply(as.matrix(E.Z[[j]]),1,sum))
E.Z.sum = E.Z.sum + sum(E.Z[[j]])
}

lambda.est = E.Zk/sum(exp(as.matrix(x)%*%as.matrix(theta.hat)))

################################################################

II = -(t(as.matrix(x))%*%(as.vector(exp(x%*%theta.hat))*x)*denom-as.matrix(num)%*%t(as.matrix(num)))/denom^2

I = E.Z.sum*II

theta.est = theta.hat - solve(I)%*%U

####if(any(is.na(theta.est))) theta.est = theta.ini

######################################################################

diff.theta = abs(theta.est-theta.hat)
diff.lambda = abs(lambda.est-lambda.hat)
diff.zeta = max(diff.theta, diff.lambda)

theta.hat = theta.est
lambda.hat = lambda.est

loops = loops+1

} ######### judge end #########

the.est = theta.hat
lam.est = lambda.hat


################## Compute Log-likelihood and AIC/BIC #################
W = list()

S_prod = c()

for(j in 1:length(upool.id)){

W[[j]] = rowSums(matrix(rep(lambda.hat, each=g.n[[j]] ), g.n[[j]] , k)*matrix(rep(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat)),k),g.n[[j]] ,k)*Ind.C[[j]] ) 

S_prod[j] = prod(exp(-W[[j]]))

}

ll = sum(Ys*log( alpha - gamma*S_prod)) + sum((1-Ys)*log( 1-alpha + gamma*S_prod)) 
AIC = -2*ll+2*(p+K_n)
BIC = -2*ll+log(length(upool.id))*(p+K_n)





t.int =  seq(min(C),max(C),length.out= K_n)

Ind.xlab = matrix(rep(order.C,each =length(t.int)),length(t.int),k) <= matrix(rep(t.int,k),length(t.int),k)

lam.int.hat = rowSums(matrix(rep(lam.est,each =length(t.int)),length(t.int),k)*Ind.xlab)

Surv.hat = exp(-lam.int.hat)
return(list("theta"=the.est,"lam"=lam.est, "Surv"=Surv.hat, "AIC"=AIC, "BIC"=BIC))
}






##################################################################################
# Bootstraps to get SE estimates
#
# Ys =  pool outcome
# x  = design matrix
# C  = time
# Kn = number of knots
# alpha = vector of Se vals
# beta =  vector of Sp vals
# groups = vector length n that identifies which pool each subject belongs
# g.n = vector of pool sizes
# upool.id = vector of unique pool ids 
# bs = number bootstrap samples


Boot.GTS<-function(Ys, x, C, Kn, alpha, beta, groups, g.n, upool.id, bs, theta.hat1, lambda.hat1){
gamma = alpha + beta - 1

n = dim(x)[1]
p = dim(x)[2]

K_n = Kn

max.loops = 1000
tol = 0.001
order.C = seq(min(C),max(C),length.out= K_n)
k = length(order.C)

##### g.n is the final group size 

Ind.C = list()

for(j in 1:length(upool.id)){
Ind.C[[j]] = matrix(rep(order.C,each = g.n[[j]] ),g.n[[j]] ,k) <= matrix(rep(C[groups == upool.id[j]],k), g.n[[j]] , k) 
}


theta.save<-matrix(-99,ncol=length(theta.hat1),nrow=bs)
Surv.save<-matrix(-99,ncol=length(lambda.hat1),nrow=bs)

########################################################
# Start bootstrapping
for(s in 1:bs){
#print(s)
theta.hat<-theta.hat1 
lambda.hat<-lambda.hat1
diff.zeta = 100
loops<-0

w <- rgamma(length(upool.id),1,1)  ##### group's weight

############ judge start ##############

while(diff.zeta >= tol && loops < max.loops){

############   E-Step

W = S = E.phi = E.Z = list()
E.Zk  = rep(0,k)
num = denom = I.num = 0


for(j in 1:length(upool.id)){

W[[j]] = rowSums(matrix(rep(lambda.hat, each=g.n[[j]] ), g.n[[j]] , k)*
matrix(rep(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat)),k),g.n[[j]] ,k)*Ind.C[[j]] ) 

S[[j]] = exp(-W[[j]])

E.phi[[j]] = Ys[j]*alpha[j]*(1-S[[j]])/(alpha[j]-gamma[j]*prod(S[[j]])) + 
(1-Ys[j])*(1-alpha[j])*(1-S[[j]])/(1-alpha[j]+gamma[j]*prod(S[[j]]))

E.Z[[j]] = matrix(rep(lambda.hat, each=g.n[[j]]),g.n[[j]], k)*
                 matrix(rep(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat)),k),g.n[[j]],k)*
                 (E.phi[[j]]*(1-S[[j]])^(-1)*Ind.C[[j]] + (1-Ind.C[[j]])) 

E.Zk = E.Zk +  apply(w[j]*E.Z[[j]],2,sum)

num = num + w[j]*t(x[groups == upool.id[j],,drop=F])%*%as.matrix(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat))) #### p by 1

denom = denom + w[j]*sum(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat)))   #####  1 by 1

I.num = I.num + w[j]*t(x[groups == upool.id[j],,drop=F])%*%(x[groups == upool.id[j],,drop=F]*as.vector(exp(as.matrix(x[groups == upool.id[j],,drop=F])%*%as.matrix(theta.hat))))

}

###########M-step

U = I = E.Z.sum = 0

for(j in 1:length(upool.id)){
U = U + w[j]*t(as.matrix(x[groups == upool.id[j],,drop=F] - matrix(rep(num/denom,each=g.n[[j]]),g.n[[j]],p)))%*%as.matrix(apply(
as.matrix(E.Z[[j]]),1,sum))

E.Z.sum = E.Z.sum + sum(w[j]*E.Z[[j]])
}

lambda.est = E.Zk/denom

################################################################

II = -(I.num*denom-as.matrix(num)%*%t(as.matrix(num)))/denom^2

I = E.Z.sum*II

theta.est = theta.hat - solve(I)%*%U

######################################################################

diff.theta = abs(theta.est-theta.hat)
diff.lambda = abs(lambda.est-lambda.hat)

diff.zeta = max(diff.theta, diff.lambda)

theta.hat = theta.est
lambda.hat = lambda.est

loops = loops+1

} ######### judge end #########

t.int =  seq(min(C),max(C),length.out= K_n)
Ind.xlab = matrix(rep(order.C,each =length(t.int)),length(t.int),k) <= matrix(rep(t.int,k),length(t.int),k)
lam.int.hat = rowSums(matrix(rep(lambda.hat,each =length(t.int)),length(t.int),k)*Ind.xlab)
Surv.hat = exp(-lam.int.hat)

theta.save[s,]<-theta.hat
Surv.save[s,]<-Surv.hat
}

return(list("bss"=theta.save, "Surv"=Surv.save))
}


#############################################################
# Putting things together for plotting
survx<-function(id,beta,surv){

bss<-dim(beta)[1]
surv.save<-matrix(-99,nrow=dim(surv)[1],ncol=dim(surv)[2])

for(i in 1:bss){
surv.save[i,]<-exp(log(surv[i,])*exp(beta[i,id]))
}

std.Surv = apply(surv.save,2,sd)


return(std.Surv)
}




